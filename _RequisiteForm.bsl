
#Область ПрограммныйИнтерфейс

// Создание одного реквизита.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма клиентского приложения.
//  ИмяРеквизита - Строка											 - Имя реквизита.
//  ОписаниеТипа - ОписаниеТипа								 - Описание типа реквизита.
//
Процедура СоздатьРеквизит(Форма,ИмяРеквизита,ОписаниеТипа) Экспорт
	
	НовыйРеквизит = Новый Структура;
	НовыйРеквизит.Вставить(ОчиститьОтЗапрещенныхСимволов(ИмяРеквизита), ОписаниеТипа);
	СоздатьРеквизиты(Форма, НовыйРеквизит);
	
КонецПроцедуры

// Создание реквизитов.
//
// Параметры:
//  Форма								 - ФормаКлиентскогоПриложения	 - Форма клиентского приложения.
//  СтруктураРеквизитов	 - Структура									 - Где ключ - это имя реквизита, значение - описание типа реквизита.
//  ДобавляемыеРеквизиты - Неопределено, Массив Из РеквизитФормы.
// 
// Возвращаемое значение:
//   - Массив Из РеквизитФормы - добавляемые реквизиты.
//
Функция СоздатьРеквизиты(Форма,СтруктураРеквизитов,ДобавляемыеРеквизиты=Неопределено) Экспорт
	
	Если ДобавляемыеРеквизиты = Неопределено Тогда ДобавляемыеРеквизиты = Новый Массив; КонецЕсли;
	Для Каждого тРеквизит Из СтруктураРеквизитов Цикл 
		НовыйРеквизит = Новый РеквизитФормы(тРеквизит.Ключ, тРеквизит.Значение);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;
	Возврат ДобавляемыеРеквизиты;
	
КонецФункции

// Создание реквизитов табличной части формы.
//
// Параметры:
//  Форма									 - ФормаКлиентскогоПриложения - Форма клиентского приложения.
//  ИмяТаблицы						 - Строка - Имя таблицы, в которую добавляем реквизиты.
//  РеквизитыТаблицы			 - Структура - где Ключ - имя реквизита, значение - Структура параметров: где ключ - имя параметра реквизита, значение - значение параметра реквизита.
//  ДобавляемыеРеквизиты	 - Неопределено, Массив Из РеквизитФормы.
// 
// Возвращаемое значение:
//   - Массив Из РеквизитФормы - добавляемые реквизиты.
//
Функция СоздатьРеквизитыТаблицы(Форма,ИмяТаблицы,РеквизитыТаблицы,ДобавляемыеРеквизиты=Неопределено) Экспорт
	
	Перем ТипРеквизита, ЗаголовокРеквизита, СохраняемыеДанныеРеквизита;
	
	Если ДобавляемыеРеквизиты = Неопределено Тогда ДобавляемыеРеквизиты = Новый Массив; КонецЕсли;
	Для Каждого тРеквизит Из РеквизитыТаблицы Цикл
		тРеквизит.Значение.Свойство("Тип", ТипРеквизита);
		тРеквизит.Значение.Свойство("Заголовок", ЗаголовокРеквизита);
		тРеквизит.Значение.Свойство("СохраняемыеДанные", СохраняемыеДанныеРеквизита);
		НовыйРеквизит = Новый РеквизитФормы(тРеквизит.Ключ, ТипРеквизита, ИмяТаблицы, ЗаголовокРеквизита, СохраняемыеДанныеРеквизита);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;
	Возврат ДобавляемыеРеквизиты;
	
КонецФункции

// Изменить реквизиты формы.
//
// Параметры:
//  Форма									 - ФормаКлиентскогоПриложения - Форма клиентского приложения.
//  ДобавляемыеРеквизиты	 - Массив Из РеквизитФормы - добавляемые реквизиты. К добавленным реквизитам верхнего уровня из модуля можно обращаться только с помощью конструкции ЭтотОбъект.<Имя реквизита>.
//  УдаляемыеРеквизиты		 - Массив Из Строка - описывающих пути к удаляемым реквизитам. Удалять можно только РАНЕЕ ПРОГРАММНО ДОБАВЛЕННЫЕ реквизиты.
//
Процедура ИзменитьРеквизиты(Форма,ДобавляемыеРеквизиты,УдаляемыеРеквизиты=Неопределено) Экспорт
	
	Если УдаляемыеРеквизиты = Неопределено Тогда УдаляемыеРеквизиты = Новый Массив; КонецЕсли;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
КонецПроцедуры

//Удалить РАНЕЕ СОЗДАННЫЕ ПРОГРАММНО реквизиты.
//
//Параметры:
//  УдаляемыеРеквизиты - Массив Из Строка - описывающих пути к удаляемым реквизитам. Удалять можно только РАНЕЕ ПРОГРАММНО ДОБАВЛЕННЫЕ реквизиты.
//
Процедура УдалитьРеквизиты(Форма,УдаляемыеРеквизиты) Экспорт
	
	Форма.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

//Удалить РАНЕЕ СОЗДАННЫЙ ПРОГРАММНО реквизит.
//
//Параметры:
//  ИмяРеквизита - Строка - описывающая путь к удаляемым реквизитам. Удалять можно только РАНЕЕ ПРОГРАММНО ДОБАВЛЕННЫЕ реквизиты.
//
Процедура УдалитьРеквизит(Форма,ИмяРеквизита) Экспорт
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
	УдалитьРеквизиты(Форма, УдаляемыеРеквизиты);
	
КонецПроцедуры

//Удалить РАНЕЕ СОЗДАННЫЙ ПРОГРАММНО реквизит и элемент формы.
//
//Параметры:
//  ИмяРеквизитаЭлемента - Строка - Имя реквизита и элемента удаляемого на форме ДОЛЖНО СОВПАДАТЬ.
//
Процедура УдалитьРеквизитИЭлемент(Форма,ИмяРеквизитаЭлемента) Экспорт
	
	УдалитьРеквизит(Форма, ИмяРеквизитаЭлемента);
	Если СтрНайти(ИмяРеквизитаЭлемента, ".") > 0 Тогда
		МассивИерархии = СтрРазделить(ИмяРеквизитаЭлемента, ".", Ложь);
		
		ИндексПоиска = МассивИерархии.ВГраница();
		Пока ИндексПоиска >= 0 Цикл
			Если МассивИерархии[ИндексПоиска] = "Объект" Тогда
				МассивИерархии.Удалить(ИндексПоиска);
			КонецЕсли;
			ИндексПоиска = ИндексПоиска - 1;
		КонецЦикла;
		
		ИмяРеквизитаЭлемента = СтрСоединить(МассивИерархии);
	КонецЕсли;
	_ЭлементФормыПрограммно.УдалитьЭлемент(Форма, ИмяРеквизитаЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает новую строку очищенную от запрещенных символов.
//
// Параметры:
//  ПроверяемаяСтрока			 - Строка	 - Имя элемента.
//  ДопРазрешенныеСимволы	 - Строка	 - Дополнительно разрешенные символы.
// 
// Возвращаемое значение:
//   - Строка - Очищенная от запрещенных символов.
//
Функция ОчиститьОтЗапрещенныхСимволов(ПроверяемаяСтрока,ДопРазрешенныеСимволы="")
	
	Если НЕ ЗначениеЗаполнено(ПроверяемаяСтрока) Тогда
		Возврат ПроверяемаяСтрока;
	КонецЕсли;
	
	ОчищеннаяСтрока = "";
	РазрешенныеСимволы = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ" + "abcdefghijklmnopqrstuvwxyzQWERTYUIOPASDFGHJKLZXCVBNM" + "0123456789_";
	Если СтрДлина(ДопРазрешенныеСимволы) > 0 Тогда
		РазрешенныеСимволы = РазрешенныеСимволы + ДопРазрешенныеСимволы;
	КонецЕсли;
	Для Сч = 1 по СтрДлина(СокрЛП(ПроверяемаяСтрока)) Цикл
		ТекСимв = Сред(ПроверяемаяСтрока, Сч, 1);
		Если Найти(РазрешенныеСимволы, ТекСимв) > 0 Тогда
			ОчищеннаяСтрока = ОчищеннаяСтрока + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	Возврат ОчищеннаяСтрока;
	
КонецФункции

// Устанавливает определенной команде формы заданные свойства.
//
// Параметры:
//  Элемент									 - КомандаФормы.
//  СтруктураСвойств				 - Структура - Ключ - имя свойства элемента формы, Значение - значение свойства элемента формы.
//
Процедура УстановитьСвойстваЭлементу(Элемент,СтруктураСвойств)
	
	Для Каждого тСвойство Из СтруктураСвойств Цикл
		Элемент[тСвойство.Ключ] = тСвойство.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет значение структуры.
// Если значение "Неопределено", тогда значение заменяется на пустую структуру.
//
// Параметры:
//  ТекущаяСтруктура - Структура - Переданная структура или новая пустая структура.
//
Процедура ЕслиСтруктураНеопределеноТоНовая(ТекущаяСтруктура)
	
	Если ТекущаяСтруктура = Неопределено Тогда ТекущаяСтруктура = Новый Структура; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
