
#Область ПрограммныйИнтерфейс

#Область ОписаниеТипа

#Область ПримитивныеТипы

// Создание нового описания строкового типа.
//
// Параметры:
//  ДлинаСтроки				 - Число - Длина строки.
//  ВариантОграничения - Строка	 - Допустимые значения: Переменная, Фиксированная.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание строкового типа.
//
Функция ОписаниеТипаСтрока(ДлинаСтроки=0,ВариантОграничения="Переменная") Экспорт
	
	Возврат Новый ОписаниеТипов("Строка",, кСтрока(ДлинаСтроки, ВариантОграничения));
	
КонецФункции

// Создание нового описания числового типа.
//
// Параметры:
//  ДлинаЧисла				 - Число	 - Общее количество разрядов числа (в т.ч. количество разрядов дробной части).
//  ТочностьЧисла			 - Число	 - Число разрядов дробной части.
//  ВариантОграничения - Строка	 - Допустимые значения: "Любой", "Неотрицательный".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание числового типа.
//
Функция ОписаниеТипаЧисло(ДлинаЧисла=15,ТочностьЧисла=2,ВариантОграничения="Любой") Экспорт
	
	Возврат Новый ОписаниеТипов("Число", кЧисло(ДлинаЧисла, ТочностьЧисла, ВариантОграничения));
	
КонецФункции

// Создание нового описания типа "Дата".
//
// Параметры:
//  ВариантОграничения - Строка - Допустимые значения: "Время", "Дата", "ДатаВремя".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Дата".
//
Функция ОписаниеТипаДатаВремя(ВариантОграничения="ДатаВремя") Экспорт
	
	Возврат Новый ОписаниеТипов("Дата",,, кДатаВремя(ВариантОграничения));
	
КонецФункции

// Создание нового описания типа "Булево".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Булево".
//
Функция ОписаниеТипаБулево() Экспорт
	
	Возврат Новый ОписаниеТипов("Булево");
	
КонецФункции

#КонецОбласти

#Область УниверсальныеКоллекции

// Создание нового описания типа "Дерево значений".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ДеревоЗначений".
//
Функция ОписаниеТипаДеревоЗначений() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ДеревоЗначений"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Ключ и значение".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "КлючИЗначение".
//
Функция ОписаниеТипаКлючИЗначение() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("КлючИЗначение"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Массив".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Массив".
//
Функция ОписаниеТипаМассив() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("Массив"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Соответствие".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Соответствие".
//
Функция ОписаниеТипаСоответствие() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("Соответствие"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Список значений".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "СписокЗначений".
//
Функция ОписаниеТипаСписокЗначений() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("СписокЗначений"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Структура".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Структура".
//
Функция ОписаниеТипаСтруктура() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("Структура"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Таблица значений".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ТаблицаЗначений".
//
Функция ОписаниеТипаТаблицаЗначений() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Динамический список".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ДинамическийСписок".
//
Функция ОписаниеТипаДинамическийСписок() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ДинамическийСписок"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

#КонецОбласти

#Область Справочники

// Создание нового описания типа "СправочникСсылка".
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "СправочникСсылка".
//
Функция ОписаниеТипаСправочник(ИмяСправочника) Экспорт
	
	Возврат Новый ОписаниеТипов("СправочникСсылка." + ОчиститьОтЗапрещенныхСимволов(ИмяСправочника));
	
КонецФункции

// Создание нового описания типов "СправочникСсылка".
//
// Параметры:
//  ИменаСправочников - Строка - Имена справочников перечисленные через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "СправочникСсылка".
//
Функция ОписаниеТиповСправочников(ИменаСправочников) Экспорт
	
	ИменаСправочников = ОчиститьОтЗапрещенныхСимволов(ИменаСправочников, ",");
	МассивТипов = Новый Массив;
	МассивСправочников = СтрРазделить(ИменаСправочников, ",", Ложь);
	Для Каждого дЭлемент Из МассивСправочников Цикл
		МассивТипов.Добавить(Тип("СправочникСсылка." + дЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область Документы

// Создание нового описания типа "ДокументСсылка".
//
// Параметры:
//  ИмяДокумента - Строка	 - Имя документа.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ДокументСсылка".
//
Функция ОписаниеТипаДокумент(ИмяДокумента) Экспорт
	
	Возврат Новый ОписаниеТипов("ДокументСсылка." + ОчиститьОтЗапрещенныхСимволов(ИмяДокумента));
	
КонецФункции

// Создание нового описания типов "ДокументСсылка".
//
// Параметры:
//  ИменаДокументов - Строка - Имена документов перечисленные через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ДокументСсылка".
//
Функция ОписаниеТиповДокументов(ИменаДокументов) Экспорт
	
	ИменаДокументов = ОчиститьОтЗапрещенныхСимволов(ИменаДокументов, ",");
	МассивТипов = Новый Массив;
	мДокументы = СтрРазделить(ИменаДокументов, ",", Ложь);
	Для Каждого дЭлемент Из мДокументы Цикл
		МассивТипов.Добавить(Тип("ДокументСсылка." + дЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область Перечисления

// Создание нового описания типа "ПеречислениеСсылка".
//
// Параметры:
//  ИмяПеречисления - Строка - Имя перечисления.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ПеречислениеСсылка".
//
Функция ОписаниеТипаПеречисление(ИмяПеречисления) Экспорт
	
	Возврат Новый ОписаниеТипов("ПеречислениеСсылка." + ОчиститьОтЗапрещенныхСимволов(ИмяПеречисления));
	
КонецФункции

// Создание нового описания типов "ПеречислениеСсылка".
//
// Параметры:
//  ИменаПеречислений - Строка - Имена перечислений через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ПеречислениеСсылка".
//
Функция ОписаниеТиповПеречислений(ИменаПеречислений) Экспорт
	
	ИменаПеречислений = ОчиститьОтЗапрещенныхСимволов(ИменаПеречислений, ",");
	МассивТипов = Новый Массив;
	мПеречислений = СтрРазделить(ИменаПеречислений, ",", Ложь);
	Для Каждого пЭлемент Из мПеречислений Цикл
		МассивТипов.Добавить(Тип("ПеречислениеСсылка." + пЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область ПланыВидовХарактеристик

// Создание нового описания типа "ПланВидовХарактеристикСсылка".
//
// Параметры:
//  ИмяПланаВидовХарактеристик - Строка - Имя плана видов характеристик.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ПланВидовХарактеристикСсылка".
//
Функция ОписаниеТипаПланВидовХарактеристик(ИмяПланаВидовХарактеристик) Экспорт
	
	Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + ОчиститьОтЗапрещенныхСимволов(ИмяПланаВидовХарактеристик));
	
КонецФункции

// Создание нового описания типов "ПланВидовХарактеристикСсылка".
//
// Параметры:
//  ИменаПлановВидовХарактеристик - Строка - Имена планов видов характеристик через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ПланВидовХарактеристикСсылка".
//
Функция ОписаниеТиповПлановВидовХарактеристик(ИменаПлановВидовХарактеристик) Экспорт
	
	ИменаПлановВидовХарактеристик = ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовХарактеристик, ",");
	МассивТипов = Новый Массив;
	мПВХ = СтрРазделить(ИменаПлановВидовХарактеристик, ",", Ложь);
	Для Каждого пвхЭлемент Из мПВХ Цикл
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка." + пвхЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Создание нового описания типов значений характеристик заданного Плана видов характеристик.
//
// Параметры:
//  ИмяПланаВидовХарактеристик - Строка - Имя плана видов характеристик.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов значений характеристик.
//
Функция ОписаниеТиповХарактеристик(ИмяПланаВидовХарактеристик) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланВидовХарактеристик.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	&ПланВидовХарактеристик КАК ПланВидовХарактеристик";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПланВидовХарактеристик", "ПланВидовХарактеристик." + ОчиститьОтЗапрещенныхСимволов(ИмяПланаВидовХарактеристик));
	РезультатЗапроса = Запрос.Выполнить();
	МассивТипов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ТипЗначения");
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область ПланыВидовРасчета

// Создание нового описания типа "ПланВидовРасчетаСсылка".
//
// Параметры:
//  ИмяПланаВидовРасчета - Строка - Имя плана видов расчета.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ПланВидовРасчетаСсылка".
//
Функция ОписаниеТипаПланВидовРасчета(ИмяПланаВидовРасчета) Экспорт
	
	Возврат Новый ОписаниеТипов("ПланВидовРасчетаСсылка." + ОчиститьОтЗапрещенныхСимволов(ИмяПланаВидовРасчета));
	
КонецФункции

// Создание нового описания типов "ПланВидовРасчетаСсылка".
//
// Параметры:
//  ИменаПлановВидовРасчета - Строка - Имена планов видов расчета через запятую(",")..
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ПланВидовРасчетаСсылка".
//
Функция ОписаниеТиповПлановВидовРасчета(ИменаПлановВидовРасчета) Экспорт
	
	ИменаПлановВидовРасчета = ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовРасчета, ",");
	МассивТипов = Новый Массив;
	мПВР = СтрРазделить(ИменаПлановВидовРасчета, ",", Ложь);
	Для Каждого пврЭлемент Из мПВР Цикл
		МассивТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + пврЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область БизнесПроцессы

// Создание нового описания типа "БизнесПроцессСсылка".
//
// Параметры:
//  ИмяБизнесПроцесса - Строка - Имя бизнес-процесса.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "БизнесПроцессСсылка".
//
Функция ОписаниеТипаБизнесПроцесс(ИмяБизнесПроцесса) Экспорт
	
	Возврат Новый ОписаниеТипов("БизнесПроцессСсылка." + ОчиститьОтЗапрещенныхСимволов(ИмяБизнесПроцесса));
	
КонецФункции

// Создание нового описания типов "БизнесПроцессСсылка".
//
// Параметры:
//  ИменаБизнесПроцессов - Строка - Имена бизнес-процессов через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "БизнесПроцессСсылка".
//
Функция ОписаниеТиповБизнесПроцессов(ИменаБизнесПроцессов) Экспорт
	
	ИменаБизнесПроцессов = ОчиститьОтЗапрещенныхСимволов(ИменаБизнесПроцессов, ",");
	МассивТипов = Новый Массив;
	мБизнесПроцессы = СтрРазделить(ИменаБизнесПроцессов, ",", Ложь);
	Для Каждого бпЭлемент Из мБизнесПроцессы Цикл
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка." + бпЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область Задачи

// Создание нового описания типа "ЗадачаСсылка".
//
// Параметры:
//  ИмяЗадачи - Строка - Имя задачи.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ЗадачаСсылка".
//
Функция ОписаниеТипаЗадача(ИмяЗадачи) Экспорт
	
	Возврат Новый ОписаниеТипов("ЗадачаСсылка." + ОчиститьОтЗапрещенныхСимволов(ИмяЗадачи));
	
КонецФункции

// Создание нового описания типов "ЗадачаСсылка".
//
// Параметры:
//  ИменаЗадач - Строка - Имена задач через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ЗадачаСсылка".
//
Функция ОписаниеТиповЗадач(ИменаЗадач) Экспорт
	
	ИменаЗадач = ОчиститьОтЗапрещенныхСимволов(ИменаЗадач, ",");
	МассивТипов = Новый Массив;
	мЗадачи = СтрРазделить(ИменаЗадач, ",", Ложь);
	Для Каждого зЭлемент Из мЗадачи Цикл
		МассивТипов.Добавить(Тип("ЗадачаСсылка." + зЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КвалификаторыТипов

// Создание квалификатора строки.
//
// Параметры:
//  ДлинаСтроки				 - Число - Содержит длину строки в символах. Строка неограниченной длины имеет длину строки, равную 0.
//  ВариантОграничения - Строка - Допустимые значения: "Переменная", "Фиксированная".
// 
// Возвращаемое значение:
//   - КвалификаторыСтроки - Описание допустимых значений строкового типа.
//
Функция кСтрока(ДлинаСтроки=0,ВариантОграничения="Переменная") Экспорт
	
	Возврат Новый КвалификаторыСтроки(ДлинаСтроки,ДопустимаяДлина[ВариантОграничения]);
	
КонецФункции

// Создание квалификатора числа.
//
// Параметры:
//  ДлинаЧисла				 - Число - Общее количество разрядов числа (в т.ч. количество разрядов дробной части).
//  ТочностьЧисла			 - Число - Число разрядов дробной части.
//  ВариантОграничения - Строка - Допустимые значения: "Любой", "Неотрицательный".
// 
// Возвращаемое значение:
//   - КвалификаторыЧисла - Описание допустимых значений числового типа.
//
Функция кЧисло(ДлинаЧисла=15,ТочностьЧисла=2,ВариантОграничения="Любой") Экспорт
	
	Возврат Новый КвалификаторыЧисла(ДлинаЧисла, ТочностьЧисла, ДопустимыйЗнак[ВариантОграничения]);
	
КонецФункции

// Создание квалификатора даты.
//
// Параметры:
//  ВариантОграничения - Строка - Допустимые значения: "Время", "Дата", "ДатаВремя".
// 
// Возвращаемое значение:
//   - КвалификаторыДаты - Описание допустимых значений типа Дата.
//
Функция кДатаВремя(ВариантОграничения="ДатаВремя") Экспорт
	
	Возврат Новый КвалификаторыДаты(ЧастиДаты[ВариантОграничения]);
	
КонецФункции

// Создание квалификатора двоичных данных.
//
// Параметры:
//  Длина								 - Число - Содержит максимальную длину двоичных данных. 0 - длина неограниченна.
//  ВариантОграничения	 - Строка - Допустимые значения: "Переменная", "Фиксированная".
// 
// Возвращаемое значение:
//   - КвалификаторыДвоичныхДанных - Описание допустимых значений двоичных данных.
//
Функция кДвоичныеДанные(Длина,ВариантОграничения="Переменная") Экспорт
	
	Возврат Новый КвалификаторыДвоичныхДанных(Длина, ДопустимаяДлина[ВариантОграничения]);
	
КонецФункции

#КонецОбласти

#Область МассивТипов

// Создание нового массива типов "СправочникСсылка".
//
// Параметры:
//  ИменаСправочников - Строка - Имена справочников через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(СправочникСсылка).
//
Функция МассивТиповСправочники(ИменаСправочников) Экспорт
	
	ИменаСправочников = ОчиститьОтЗапрещенныхСимволов(ИменаСправочников, ",");
	МассивТипов = Новый Массив;
	мСправочники = СтрРазделить(ИменаСправочников, ",", Ложь);
	Для Каждого сЭлемент Из мСправочники Цикл
		МассивТипов.Добавить(Тип("СправочникСсылка." + сЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "ДокументСсылка".
//
// Параметры:
//  ИменаДокументов - Строка - Имена документов через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ДокументСсылка)
//
Функция МассивТиповДокументы(ИменаДокументов) Экспорт
	
	ИменаДокументов = ОчиститьОтЗапрещенныхСимволов(ИменаДокументов, ",");
	МассивТипов = Новый Массив;
	мДокументы = СтрРазделить(ИменаДокументов, ",", Ложь);
	Для Каждого дЭлемент Из мДокументы Цикл
		МассивТипов.Добавить(Тип("ДокументСсылка." + дЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "ПеречислениеСсылка".
//
// Параметры:
//  ИменаПеречислений - Строка - Имена перечислений через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ПеречислениеСсылка)
//
Функция МассивТиповПеречисления(ИменаПеречислений) Экспорт
	
	ИменаПеречислений = ОчиститьОтЗапрещенныхСимволов(ИменаПеречислений, ",");
	МассивТипов = Новый Массив;
	мПеречисления = СтрРазделить(ИменаПеречислений, ",", Ложь);
	Для Каждого пЭлемент Из мПеречисления Цикл
		МассивТипов.Добавить(Тип("ПеречислениеСсылка." + пЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "ПланВидовХарактеристикСсылка".
//
// Параметры:
//  ИменаПлановВидовХарактеристик - Строка - Имена планов видов характеристик через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ПланВидовХарактеристикСсылка)
//
Функция МассивТиповПлановВидовХарактеристик(ИменаПлановВидовХарактеристик) Экспорт
	
	ИменаПлановВидовХарактеристик = ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовХарактеристик, ",");
	МассивТипов = Новый Массив;
	мПВХ = СтрРазделить(ИменаПлановВидовХарактеристик, ",", Ложь);
	Для Каждого пвхЭлемент Из мПВХ Цикл
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка." + пвхЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "ПланВидовРасчетаСсылка".
//
// Параметры:
//  ИменаПлановВидовРасчета - Строка - Имена планов видов расчета через запятую(",")..
// 
// Возвращаемое значение:
//   - Массив Из Тип(ПланВидовРасчетаСсылка)
//
Функция МассивТиповПлановВидовРасчета(ИменаПлановВидовРасчета) Экспорт
	
	ИменаПлановВидовРасчета = ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовРасчета, ",");
	МассивТипов = Новый Массив;
	мПВР = СтрРазделить(ИменаПлановВидовРасчета, ",", Ложь);
	Для Каждого пврЭлемент Из мПВР Цикл
		МассивТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + пврЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "БизнесПроцессСсылка".
//
// Параметры:
//  ИменаБизнесПроцессов - Строка - Имена бизнес-процессов через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(БизнесПроцессСсылка).
//
Функция МассивТиповБизнесПроцессов(ИменаБизнесПроцессов) Экспорт
	
	ИменаБизнесПроцессов = ОчиститьОтЗапрещенныхСимволов(ИменаБизнесПроцессов, ",");
	МассивТипов = Новый Массив;
	мБизнесПроцессы = СтрРазделить(ИменаБизнесПроцессов, ",", Ложь);
	Для Каждого бпЭлемент Из мБизнесПроцессы Цикл
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка." + бпЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "ЗадачаСсылка".
//
// Параметры:
//  ИменаЗадач - Строка - Имена задач через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ЗадачаСсылка).
//
Функция МассивТиповЗадач(ИменаЗадач) Экспорт
	
	ИменаЗадач = ОчиститьОтЗапрещенныхСимволов(ИменаЗадач, ",");
	МассивТипов = Новый Массив;
	мЗадачи = СтрРазделить(ИменаЗадач, ",", Ложь);
	Для Каждого зЭлемент Из мЗадачи Цикл
		МассивТипов.Добавить(Тип("ЗадачаСсылка." + зЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает новую строку очищенную от запрещенных символов.
//
// Параметры:
//  ПроверяемаяСтрока			 - Строка	 - Имя элемента.
//  ДопРазрешенныеСимволы	 - Строка	 - Дополнительно разрешенные символы.
// 
// Возвращаемое значение:
//   - Строка - Очищенная от запрещенных символов.
//
Функция ОчиститьОтЗапрещенныхСимволов(ПроверяемаяСтрока,ДопРазрешенныеСимволы="")
	
	Если НЕ ЗначениеЗаполнено(ПроверяемаяСтрока) Тогда
		Возврат ПроверяемаяСтрока;
	КонецЕсли;
	
	ОчищеннаяСтрока = "";
	РазрешенныеСимволы = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ" + "abcdefghijklmnopqrstuvwxyzQWERTYUIOPASDFGHJKLZXCVBNM" + "0123456789_";
	Если СтрДлина(ДопРазрешенныеСимволы) > 0 Тогда
		РазрешенныеСимволы = РазрешенныеСимволы + ДопРазрешенныеСимволы;
	КонецЕсли;
	Для Сч = 1 по СтрДлина(СокрЛП(ПроверяемаяСтрока)) Цикл
		ТекСимв = Сред(ПроверяемаяСтрока, Сч, 1);
		Если Найти(РазрешенныеСимволы, ТекСимв) > 0 Тогда
			ОчищеннаяСтрока = ОчищеннаяСтрока + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	Возврат ОчищеннаяСтрока;
	
КонецФункции

#КонецОбласти
